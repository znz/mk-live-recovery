#!/bin/bash

# use sudo on demand
if [ "${SUDO_CMD:+set}" = set ] && [ `id -u` -eq 0 ]; then
    SUDO_CMD=
else
    SUDO_CMD=${SUDO_CMD:-"sudo"}
fi
export SUDO_CMD

. ssft.sh
SSFT_FRONTEND=${SSFT_FRONTEND:-$(ssft_choose_frontend)}
export SSFT_FRONTEND
cd "$(dirname "$0")"
TIT="$(basename "$0")"

TEXTDOMAIN=mk-live-recovery
export TEXTDOMAIN
if [ -d locale ]; then
  TEXTDOMAINDIR=$(pwd)/locale
  export TEXTDOMAINDIR
fi

# hooks before exit
# hook should be simple command. escaped string may cause troubles.
trap0_functions=("")
run_trap0_functions () {
    for x in "${trap0_functions[@]}"; do
	$x
    done
}

push_trap0_functions () {
    trap0_functions[${#trap0_functions[@]}]="$@"
}

pop_trap0_functions () {
    trap0_functions=("${trap0_functions[@]:0:$[${#trap0_functions[@]}-1]}")
}

unshift_trap0_functions () {
    trap0_functions=("$*" "${trap0_functions:+${trap0_functions[@]}}")
}

shift_trap0_functions () {
    trap0_functions=("${trap0_functions[@]:1:$[${#trap0_functions[@]}]}")
}

trap run_trap0_functions 0

prepare_workdir () {
    if [ "${WORKDIR:+set}" = set ]; then
        return
    fi
    WORKDIR=$(mktemp -d /tmp/mk-live-recovery.XXXXXXXXXX)
    push_trap0_functions "rm -rf $WORKDIR"
}

# run shell scripts
my_run_parts () {
    local name=$1; shift
    local f
    prepare_workdir
    prepare_run_parts "$WORKDIR" "$name"
    for f in "$WORKDIR/$name.d"/*.sh; do
        if [ -x "$f" ]; then
            if ! "$f" "$@"; then
                exit_status=$?
                echo FAILED:$exit_status: "$f" "$@"
                return $exit_status
            fi
        fi
    done
}

prepare_run_parts () {
    local work=$1
    local name=$2
    local f
    if [ ! -d "$work/$name.d" ]; then
        mkdir "$work/$name.d"
        for f in /usr/share/mk-live-recovery/$name.d/*.sh /etc/mk-live-recovery/$name.d/*.sh $name.d/*.sh; do
	    if [ -x "$f" ]; then
	        cp "$f" "$work/$name.d"
	    fi
        done
    fi
}

initd_start () {
    my_run_parts init start
}

initd_stop () {
    my_run_parts init stop
}

_bind_umount_dev_proc () {
    $SUDO_CMD umount "$MOUNTPOINT/dev" || :
    $SUDO_CMD umount "$MOUNTPOINT/proc" || :
}
bind_umount_dev_proc () {
    _bind_umount_dev_proc
    shift_trap0_functions
}

bind_mount_dev_proc () {
    $SUDO_CMD mount --bind /proc "$MOUNTPOINT/proc"
    $SUDO_CMD mount --bind /dev "$MOUNTPOINT/dev"
    unshift_trap0_functions _bind_umount_dev_proc
}

umount_target () {
    $SUDO_CMD umount "$MOUNTPOINT"
}

mount_target () {
    if awk "\$2==\"$MOUNTPOINT\"{exit 1}" /proc/mounts; then
        $SUDO_CMD mount "$ROOT_DEVICE" "$MOUNTPOINT"
        unshift_trap0_functions umount_target
    else
        eval_gettext 'OK, already mounted: ${MOUNTPOINT}'; echo
    fi
}

root_device () {
    mount | awk '$3=="/"{d=$1}END{print d}'
}

boot_drive () {
    root_device | sed 's,[0-9]*$,,'
}

target_drive () {
    case "$1" in
	/dev/?d[ab])
	    # /dev/sda <-> /dev/sdb
	    echo "$1" | tr ab ba
	    ;;
	*)
	    # fallback, guess other drive
	    echo /dev/?d? | grep -v "$1" | tail -n1
	    ;;
    esac
}

V () {
	echo "+" "$@"
	"$@"
}
