#!/bin/bash
set -e

if [ -f ./common-functions ]; then
    . ./common-functions
else
    . /usr/share/mk-live-recovery/common-functions
fi

export LIVE_RECOVERY_MODE="${LIVE_RECOVERY_MODE:-false}"
export SFDISK_D=${SFDISK_D:-/dev/sda}
export TARGET_DRIVE=${TARGET_DRIVE:-/dev/sdb}
export ROOT_DEVICE=${ROOT_DEVICE:-${TARGET_DRIVE}1}
export SWAP_DEVICE=${SWAP_DEVICE:-${TARGET_DRIVE}5}
export MOUNTPOINT=${MOUNTPOINT:-/mnt/sdb1}
export SRC_DIR=${SRC_DIR:-/}

MSG="$(eval_gettext 'Format ${TARGET_DRIVE}, OK?')"
if ssft_yesno "$TIT" "$MSG"; then
    :
else
    exit $?
fi
MSG="$(eval_gettext 'Format ${TARGET_DRIVE}, really OK?')"
if ssft_yesno "$TIT" "$MSG"; then
    :
else
    exit $?
fi

if grep -q "$SWAP_DEVICE" /proc/swaps; then
    eval_gettext 'Disabling swap ${SWAP_DEVICE}...'; echo
    $SUDO_CMD swapoff "$SWAP_DEVICE"
fi

gettext "Partitioning..."; echo
if [ -n "$(LANG=C $SUDO_CMD sfdisk -R "$TARGET_DRIVE" 2>&1 | grep BLKRRPART)" ]; then
    MSG="$(eval_gettext '${TARGET_DRIVE} is currently in use. Can not format.')"
    ssft_display_error "$TIT" "$MSG"
    exit 1
fi
if [ -f "$SFDISK_D" ]; then
    $SUDO_CMD sfdisk --force "$TARGET_DRIVE" < "$SFDISK_D"
else
    $SUDO_CMD sfdisk -d "$SFDISK_D" | $SUDO_CMD sfdisk --force "$TARGET_DRIVE"
fi

eval_gettext 'Formatting ${SWAP_DEVICE} as swap...'; echo
$SUDO_CMD mkswap "$SWAP_DEVICE"
eval_gettext 'Enabling swap ${SWAP_DEVICE}...'; echo
$SUDO_CMD swapon "$SWAP_DEVICE"
eval_gettext 'Formatting ${ROOT_DEVICE} as root partition...'; echo
$SUDO_CMD mkfs.ext4 "$ROOT_DEVICE"
eval_gettext 'Creating mount point ${MOUNTPOINT}...'; echo
$SUDO_CMD mkdir -p "$MOUNTPOINT"
gettext 'Copying files to target partition...'
if $LIVE_RECOVERY_MODE; then
    if [ -x ./mk-mirror-copy ]; then
        ./mk-mirror-copy live
    else
        mk-mirror-copy live
    fi
else
    if [ -x ./mk-mirror-copy ]; then
        ./mk-mirror-copy full
    else
        mk-mirror-copy full
    fi
fi
eval_gettext 'Disabling swap ${SWAP_DEVICE}...'; echo
swapoff "$SWAP_DEVICE"
gettext 'done.'; echo

if $LIVE_RECOVERY_MODE; then
    # Notify the user that a reboot is required
    if [ -x /usr/share/update-notifier/notify-reboot-required ]; then
        $SUDO_CMD /usr/share/update-notifier/notify-reboot-required
    fi
    MSG="$(gettext 'Recovery finished. Please reboot.')"
    if ssft_display_message "$TIT" "$MSG"; then
        :
    else
        exit $?
    fi
fi
