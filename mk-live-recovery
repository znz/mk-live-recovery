#!/bin/bash
# http://www.geekconnection.org/remastersys/info.html
set -e

export WORKDIR=${WORKDIR:-"/tmp/_work"}
export CD_ROOT=${CD_ROOT:-"/tmp/_cd"}
export OUT_ISO=${OUT_ISO:-$WORKDIR/live-recovery-$(date '+%Y%m%d').iso}
export KERNEL_RELEASE=${KERNEL_RELEASE:-"$(uname -r)"}
export INITRD_IMG=${INITRD_IMG:-"/boot/initrd.img-$KERNEL_RELEASE"}
export VMLINUZ=${VMLINUZ:-"/boot/vmlinuz-$KERNEL_RELEASE"}
export MOUNTPOINT="${WORKDIR}/rootfs"
export FORMAT=squashfs
export FS_DIR=casper
export SFDISK_DRIVE=${SFDISK_DRIVE:-"/dev/sda"}
EXCLUDE_FILE=${EXCLUDE_FILE:-"$WORKDIR/exclude-list.txt"}

if [ -f ./common-functions ]; then
    . ./common-functions
else
    . /usr/share/mk-live-recovery/common-functions
fi

clean () {
    $SUDO_CMD rm -frv "${WORKDIR}"
    $SUDO_CMD rm -frv "${CD_ROOT}"
}

prepare_dir () {
    if [ ! -d $(dirname "$OUT_ISO") ]; then
        OUT_ISO_DIR=$(dirname "$OUT_ISO")
	eval_gettext 'directory not found: ${OUT_ISO_DIR}'; echo
	exit 1
    fi
    $SUDO_CMD mkdir -pv "${MOUNTPOINT}"
    $SUDO_CMD mkdir -pv "${CD_ROOT}"
}

prepare_exclude () {
    gettext 'Preparing exclude file...'; echo
    my_run_parts exclude live | $SUDO_CMD tee "$EXCLUDE_FILE"
}

build_root_fs () {
    local f d
    gettext 'Building root fs...'; echo
    $SUDO_CMD rsync -av --delete -HAX --one-file-system --delete-excluded --exclude-from="$EXCLUDE_FILE" "/" "${MOUNTPOINT}/"

    if [ -d scripts ]; then
        # additional scripts
	for f in scripts/*/*; do
	    d=$(dirname "$f")
	    mkdir -pv "${MOUNTPOINT}/etc/initramfs-tools/$d"
	    cp -v "$f" "${MOUNTPOINT}/etc/initramfs-tools/$f"
	    chmod +x "${MOUNTPOINT}/etc/initramfs-tools/$f"
	done
    fi
    bind_mount_dev_proc
    prepare_run_parts "${MOUNTPOINT}/tmp" "root-fs"
    $SUDO_CMD chroot "${MOUNTPOINT}" /bin/bash -ex <<'EOF'
export LANG=C
for f in /tmp/root-fs.d/*.sh; do
    . $f
done
EOF
    bind_umount_dev_proc
}

pack_root_fs () {
    gettext 'Packing root fs...'; echo
    $SUDO_CMD mkdir -pv "${CD_ROOT}/${FS_DIR}"
    $SUDO_CMD rm -fv "${CD_ROOT}/${FS_DIR}/filesystem.${FORMAT}"
    $SUDO_CMD mksquashfs "${MOUNTPOINT}" "${CD_ROOT}/${FS_DIR}/filesystem.${FORMAT}"
}

build_cd_boot () {
    gettext 'Building /boot...'; echo
    $SUDO_CMD mkdir -pv "${CD_ROOT}"/boot/grub/locale
    $SUDO_CMD cp -pv /usr/share/grub/unicode.pf2 "${CD_ROOT}/boot/grub/"
    if [ -f grub2-ja.po ]; then
	if [ ! -e grub2-ja.mo ] || [ grub2-ja.mo -ot grub2-ja.po ]; then
	    msgfmt -o grub2-ja.mo grub2-ja.po
	fi
	$SUDO_CMD cp -pv grub2-ja.mo "$CD_ROOT/boot/grub/locale/ja.mo"
    elif [ -f /boot/grub/locale/ja.mo ]; then
	$SUDO_CMD cp -pv /boot/grub/locale/ja.mo "${CD_ROOT}/boot/grub/locale/ja.mo"
    fi
    $SUDO_CMD cp -pv "${MOUNTPOINT}/boot/vmlinuz-$(uname -r)" "${CD_ROOT}/boot/vmlinuz"
    $SUDO_CMD cp -pv "${MOUNTPOINT}/boot/initrd.img-$(uname -r)" "${CD_ROOT}/boot/initrd.img"
    $SUDO_CMD cp -pv "${MOUNTPOINT}/boot/memtest86+.bin" "${CD_ROOT}/boot"

}

make_grub_cfg () {
    gettext 'Making /boot/grub/grub.cfg...'; echo
    my_run_parts grub | $SUDO_CMD tee "${CD_ROOT}/boot/grub/grub.cfg"
}

make_cdrom_recovery () {
    gettext 'Making /recovery...'; echo
    $SUDO_CMD mkdir -pv "${CD_ROOT}/recovery"
    $SUDO_CMD sfdisk -d "${SFDISK_DRIVE}" | $SUDO_CMD tee "${CD_ROOT}/recovery/sfdisk-d.txt"
    [ ! -d recovery ] && cd /usr/share/mk-live-recovery
    $SUDO_CMD cp -v recovery/restore.desktop "${CD_ROOT}/recovery/restore.desktop"
    $SUDO_CMD cp -v recovery/restore.sh "${CD_ROOT}/recovery/restore.sh"
    $SUDO_CMD chmod +x "${CD_ROOT}/recovery/restore.sh"
    [ ! -d locale ] && cd /usr/share
    $SUDO_CMD mkdir -pv "${CD_ROOT}/recovery/locale"
    $SUDO_CMD cp -v locale/ja/LC_MESSAGES/mk-live-recovery.mo "${CD_ROOT}/recovery/locale/"
}

build_iso () {
    (
        cd ${CD_ROOT} &&
        find . -name md5sum.txt -prune -o -type f -print0 |
        xargs -0 sudo md5sum |
        $SUDO_CMD tee "${CD_ROOT}/md5sum.txt"
    )
    $SUDO_CMD grub-mkrescue "--output=${OUT_ISO}" "${CD_ROOT}"
}

build () {
    prepare_dir
    prepare_exclude
    unshift_trap0_functions initd_start; initd_stop
    build_root_fs
    pack_root_fs
    build_cd_boot
    make_grub_cfg
    make_cdrom_recovery
    build_iso
}

usage () {
    cat <<USAGE
usage: $0 build
usage: $0 clean
USAGE
}

if [ "${1:+set}" = set ]; then
    "$@"
    gettext 'done.'; echo
else
    usage
    exit 1
fi
